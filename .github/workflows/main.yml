name: CI

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: read # checkout etc
  id-token: write # oidc

jobs:
  test:
    name: Test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      # docker builds and dockerhub access required by tests
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: hytromo
          password: ${{ secrets.DOCKER_PAT }}
      
      - name: Run tests
        run: go test ./... -coverprofile=coverage.txt

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Go build
        run: |
            CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o mimosa ./cmd/mimosa/*

      - uses: actions/upload-artifact@v4
        with:
          name: mimosa
          path: mimosa

  e2e:
    name: E2E Tests
    runs-on: ubuntu-24.04
    needs: build
    strategy:
      fail-fast: false
      matrix:
        registry: [DockerHub, "GCP GAR", "AWS ECR"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v5
        with:
          name: mimosa
          path: /usr/local/bin

      - name: Make mimosa executable
        run: chmod +x /usr/local/bin/mimosa

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      ### auth start ###

      #################
      ### DOCKERHUB ###
      #################
      - name: Login to Docker Hub
        if: ${{ matrix.registry == 'DockerHub' }}
        uses: docker/login-action@v3
        with:
          username: hytromo
          password: ${{ secrets.DOCKER_PAT }}

      ############
      ### AWS  ###
      ############
      - name: Configure AWS credentials
        if: ${{ matrix.registry == 'AWS ECR' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::947281064882:role/mimosa-github-actions-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: ${{ matrix.registry == 'AWS ECR' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      ###########
      ### GCP ###
      ###########
      - uses: google-github-actions/auth@v2
        name: Authenticate to GCP
        id: auth-gcp
        if: ${{ matrix.registry == 'GCP GAR' }}
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: Login to GCP GAR
        uses: docker/login-action@v3
        if: ${{ matrix.registry == 'GCP GAR' }}
        with:
          registry: europe-west1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth-gcp.outputs.access_token }}
      ### auth end ###

      - name: Run e2e tests
        env:
            REGISTRY_TYPE: ${{ matrix.registry }}
            REPOSITORY: mimosa-testing
            IMAGE_TAG: ${{ github.sha }}
            LOG_LEVEL: debug
        working-directory: tests-e2e
        run: |
            REGISTRY="hytromo" # DockerHub

            if [ "$REGISTRY_TYPE" == "AWS ECR" ]; then
              echo "Running tests against AWS ECR"
              REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            elif [ "$REGISTRY_TYPE" == "GCP GAR" ]; then
              echo "Running tests against GCP GAR"
              REGISTRY="europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mimosa"
            fi

            # iterate over the different directories - each directory is a different e2e test
            for dir in *; do
              cd "$dir";
              export FULL_IMAGE_TAG=$REGISTRY/$REPOSITORY:$IMAGE_TAG-$RANDOM
              bash test.sh
              cd -
            done

  release:
    name: Release
    needs: [build, test, e2e]
    permissions:
      contents: write # write release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
